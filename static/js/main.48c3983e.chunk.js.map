{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleUsersInput","e","newUser","target","value","console","log","setState","users","addUsers","usersCopy","state","user","deleteUsers","name","filter","fetch","then","res","json","usersData","jsxUsers","this","map","onClick","key","id","className","htmlFor","type","onChange","event","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mPAmEeA,G,wDA9Db,aAAe,IAAD,8BACZ,gBAcFC,iBAAmB,SAACC,GAClB,IAAIC,EAAUD,EAAEE,OAAOC,MACvBC,QAAQC,IAAIJ,GACZ,EAAKK,SAAS,CAAEL,QAAS,CAAEM,MAAON,MAlBtB,EAsBdO,SAAW,WACT,IAAIC,EAAS,sBAAO,EAAKC,MAAMH,OAAlB,CAAyB,EAAKG,MAAMT,UACjDG,QAAQC,IAAII,GACZ,EAAKH,SAAS,CAAEK,KAAMF,KAzBV,EA4BdG,YAAc,SAACC,GACb,IAAIJ,EAAY,EAAKC,MAAMC,KAAKG,QAAO,SAACH,GAAD,OAAUA,EAAKE,OAASA,KAE/D,EAAKP,SAAS,CAAEC,MAAOE,KA5BvB,EAAKC,MAAQ,CAAEH,MAAO,IAHV,E,gEAMO,IAAD,OAElBQ,MADU,8CAEPC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLf,QAAQC,IAAIc,GACZ,EAAKb,SAAS,CAAEC,MAAOY,S,+BAqBnB,IAAD,OACHC,EAAWC,KAAKX,MAAMH,MAAMe,KAAI,SAACX,GACnC,OAAQ,yBAAKY,QAAS,kBAAI,EAAKX,YAAYD,EAAKE,OAAQW,IAAKb,EAAKc,IAAKd,EAAKE,SAI9E,OAEE,yBAAKa,UAAU,OACb,mCAEA,8CACD,8BACA,2BAAOC,QAAQ,QAAf,QACK,2BACEC,KAAK,OACLf,KAAK,OACLgB,SAAU,SAACC,GAAD,OAAW,EAAK/B,iBAAiB+B,MAE5C,4BAAQF,KAAK,SAASL,QAAS,kBAAM,EAAKf,aAA1C,QAIT,6BAAMY,Q,GAzDQW,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.48c3983e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = { users: [] };\n  }\n\n  componentDidMount() {\n    let url = \"https://jsonplaceholder.typicode.com/users\";\n    fetch(url)\n      .then((res) => res.json())\n      .then((usersData) => {\n        console.log(usersData);\n        this.setState({ users: usersData });\n      });\n  }\n  handleUsersInput = (e) => {\n    let newUser = e.target.value;\n    console.log(newUser)\n    this.setState({ newUser: { users: newUser } });\n  };\n\n  \n  addUsers = () => {\n    let usersCopy = [...this.state.users, this.state.newUser];\n    console.log(usersCopy)\n    this.setState({ user: usersCopy });\n  };\n\n  deleteUsers = (name) => {\n    let usersCopy = this.state.user.filter((user) => user.name !== name);\n\n    this.setState({ users: usersCopy });\n  };\n  render() {\n    let jsxUsers = this.state.users.map((user)=>{\n      return  <div onClick={()=>this.deleteUsers(user.name)}  key={user.id}>{user.name}\n          \n      </div>\n  })\n    return (\n      \n      <div className=\"App\">\n        <h2>API</h2>\n\n        <h3>OUR TOP USERS!</h3>\n       <form >\n       <label htmlFor=\"name\">User</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              onChange={(event) => this.handleUsersInput(event)}\n            />\n             <button type=\"button\" onClick={() => this.addUsers()}>\n              ADD\n            </button>\n       </form>\n    <div>{jsxUsers}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}